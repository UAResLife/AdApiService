using System.Collections.Generic;

namespace AdApiService
{
    /// <summary>
    /// This class is simply a dictionary where the keys are the names of the attributes
    /// in lowercase and the values are the actual property names. The class is a singleton
    /// and exposes a single method: get(string property) which takes a property and returns
    /// the properly-cased attribute name.
    /// </summary>
    public class PropertyLookup
    {
        private static Dictionary<string, string> properties;
        private static PropertyLookup instance;

        private PropertyLookup()
        {
            Init();
        }

        private void Init()
        {
            properties = new Dictionary<string, string>();
            properties.Add("accountexpires", "accountExpires");
            properties.Add("accountnamehistory", "accountNameHistory");
            properties.Add("acspolicyname", "aCSPolicyName");
            properties.Add("admincount", "adminCount");
            properties.Add("admindescription", "adminDescription");
            properties.Add("admindisplayname", "adminDisplayName");
            properties.Add("allowedattributes", "allowedAttributes");
            properties.Add("allowedattributeseffective", "allowedAttributesEffective");
            properties.Add("allowedchildclasses", "allowedChildClasses");
            properties.Add("allowedchildclasseseffective", "allowedChildClassesEffective");
            properties.Add("altsecurityidentities", "altSecurityIdentities");
            properties.Add("assistant", "assistant");
            properties.Add("badpasswordtime", "badPasswordTime");
            properties.Add("badpwdcount", "badPwdCount");
            properties.Add("bridgeheadserverlistbl", "bridgeheadServerListBL");
            properties.Add("c", "c");
            properties.Add("canonicalname", "canonicalName");
            properties.Add("cn", "cn");
            properties.Add("co", "co");
            properties.Add("codepage", "codePage");
            properties.Add("comment", "comment");
            properties.Add("company", "company");
            properties.Add("controlaccessrights", "controlAccessRights");
            properties.Add("countrycode", "countryCode");
            properties.Add("createtimestamp", "createTimeStamp");
            properties.Add("dbcspwd", "dBCSPwd");
            properties.Add("defaultclassstore", "defaultClassStore");
            properties.Add("department", "department");
            properties.Add("description", "description");
            properties.Add("desktopprofile", "desktopProfile");
            properties.Add("destinationindicator", "destinationIndicator");
            properties.Add("directreports", "directReports");
            properties.Add("displayname", "displayName");
            properties.Add("displaynameprintable", "displayNamePrintable");
            properties.Add("distinguishedname", "distinguishedName");
            properties.Add("division", "division");
            properties.Add("dsasignature", "dSASignature");
            properties.Add("dscorepropagationdata", "dSCorePropagationData");
            properties.Add("dynamicldapserver", "dynamicLDAPServer");
            properties.Add("employeeid", "employeeID");
            properties.Add("extensionname", "extensionName");
            properties.Add("facsimiletelephonenumber", "facsimileTelephoneNumber");
            properties.Add("flags", "flags");
            properties.Add("fromentry", "fromEntry");
            properties.Add("frscomputerreferencebl", "frsComputerReferenceBL");
            properties.Add("frsmemberreferencebl", "fRSMemberReferenceBL");
            properties.Add("fsmoroleowner", "fSMORoleOwner");
            properties.Add("garbagecollperiod", "garbageCollPeriod");
            properties.Add("generationqualifier", "generationQualifier");
            properties.Add("givenname", "givenName");
            properties.Add("groupmembershipsam", "groupMembershipSAM");
            properties.Add("grouppriority", "groupPriority");
            properties.Add("groupstoignore", "groupsToIgnore");
            properties.Add("homedirectory", "homeDirectory");
            properties.Add("homedrive", "homeDrive");
            properties.Add("homephone", "homePhone");
            properties.Add("homepostaladdress", "homePostalAddress");
            properties.Add("info", "info");
            properties.Add("initials", "initials");
            properties.Add("instancetype", "instanceType");
            properties.Add("internationalisdnnumber", "internationalISDNNumber");
            properties.Add("ipphone", "ipPhone");
            properties.Add("iscriticalsystemobject", "isCriticalSystemObject");
            properties.Add("isdeleted", "isDeleted");
            properties.Add("isprivilegeholder", "isPrivilegeHolder");
            properties.Add("l", "l");
            properties.Add("lastknownparent", "lastKnownParent");
            properties.Add("lastlogoff", "lastLogoff");
            properties.Add("lastlogon", "lastLogon");
            properties.Add("legacyexchangedn", "legacyExchangeDN");
            properties.Add("lmpwdhistory", "lmPwdHistory");
            properties.Add("localeid", "localeID");
            properties.Add("lockouttime", "lockoutTime");
            properties.Add("logoncount", "logonCount");
            properties.Add("logonhours", "logonHours");
            properties.Add("logonworkstation", "logonWorkstation");
            properties.Add("mail", "mail");
            properties.Add("managedobjects", "managedObjects");
            properties.Add("manager", "manager");
            properties.Add("masteredby", "masteredBy");
            properties.Add("maxstorage", "maxStorage");
            properties.Add("memberof", "memberOf");
            properties.Add("mhsoraddress", "mhsORAddress");
            properties.Add("middlename", "middleName");
            properties.Add("mobile", "mobile");
            properties.Add("modifytimestamp", "modifyTimeStamp");
            properties.Add("ms-ds-consistencychildcount", "mS-DS-ConsistencyChildCount");
            properties.Add("ms-ds-consistencyguid", "mS-DS-ConsistencyGuid");
            properties.Add("ms-ds-creatorsid", "mS-DS-CreatorSID");
            properties.Add("msmqdigests", "mSMQDigests");
            properties.Add("msmqdigestsmig", "mSMQDigestsMig");
            properties.Add("msmqsigncertificates", "mSMQSignCertificates");
            properties.Add("msmqsigncertificatesmig", "mSMQSignCertificatesMig");
            properties.Add("msnpallowdialin", "msNPAllowDialin");
            properties.Add("msnpcallingstationid", "msNPCallingStationID");
            properties.Add("msnpsavedcallingstationid", "msNPSavedCallingStationID");
            properties.Add("msradiuscallbacknumber", "msRADIUSCallbackNumber");
            properties.Add("msradiusframedipaddress", "msRADIUSFramedIPAddress");
            properties.Add("msradiusframedroute", "msRADIUSFramedRoute");
            properties.Add("msradiusservicetype", "msRADIUSServiceType");
            properties.Add("msrassavedcallbacknumber", "msRASSavedCallbackNumber");
            properties.Add("msrassavedframedipaddress", "msRASSavedFramedIPAddress");
            properties.Add("msrassavedframedroute", "msRASSavedFramedRoute");
            properties.Add("name", "name");
            properties.Add("netbootscpbl", "netbootSCPBL");
            properties.Add("networkaddress", "networkAddress");
            properties.Add("nonsecuritymemberbl", "nonSecurityMemberBL");
            properties.Add("ntpwdhistory", "ntPwdHistory");
            properties.Add("ntsecuritydescriptor", "nTSecurityDescriptor");
            properties.Add("o", "o");
            properties.Add("objectcategory", "objectCategory");
            properties.Add("objectclass", "objectClass");
            properties.Add("objectguid", "objectGUID");
            properties.Add("objectsid", "objectSid");
            properties.Add("objectversion", "objectVersion");
            properties.Add("operatorcount", "operatorCount");
            properties.Add("otherfacsimiletelephonenumber", "otherFacsimileTelephoneNumber");
            properties.Add("otherhomephone", "otherHomePhone");
            properties.Add("otheripphone", "otherIpPhone");
            properties.Add("otherloginworkstations", "otherLoginWorkstations");
            properties.Add("othermailbox", "otherMailbox");
            properties.Add("othermobile", "otherMobile");
            properties.Add("otherpager", "otherPager");
            properties.Add("othertelephone", "otherTelephone");
            properties.Add("otherwellknownobjects", "otherWellKnownObjects");
            properties.Add("ou", "ou");
            properties.Add("pager", "pager");
            properties.Add("partialattributedeletionlist", "partialAttributeDeletionList");
            properties.Add("partialattributeset", "partialAttributeSet");
            properties.Add("personaltitle", "personalTitle");
            properties.Add("physicaldeliveryofficename", "physicalDeliveryOfficeName");
            properties.Add("possibleinferiors", "possibleInferiors");
            properties.Add("postaladdress", "postalAddress");
            properties.Add("postalcode", "postalCode");
            properties.Add("postofficebox", "postOfficeBox");
            properties.Add("preferreddeliverymethod", "preferredDeliveryMethod");
            properties.Add("preferredou", "preferredOU");
            properties.Add("primarygroupid", "primaryGroupID");
            properties.Add("primaryinternationalisdnnumber", "primaryInternationalISDNNumber");
            properties.Add("primarytelexnumber", "primaryTelexNumber");
            properties.Add("profilepath", "profilePath");
            properties.Add("proxiedobjectname", "proxiedObjectName");
            properties.Add("proxyaddresses", "proxyAddresses");
            properties.Add("pwdlastset", "pwdLastSet");
            properties.Add("querypolicybl", "queryPolicyBL");
            properties.Add("registeredaddress", "registeredAddress");
            properties.Add("replpropertymetadata", "replPropertyMetaData");
            properties.Add("repluptodatevector", "replUpToDateVector");
            properties.Add("repsfrom", "repsFrom");
            properties.Add("repsto", "repsTo");
            properties.Add("revision", "revision");
            properties.Add("rid", "rid");
            properties.Add("samaccountname", "sAMAccountName");
            properties.Add("samaccounttype", "sAMAccountType");
            properties.Add("scriptpath", "scriptPath");
            properties.Add("sdrightseffective", "sDRightsEffective");
            properties.Add("securityidentifier", "securityIdentifier");
            properties.Add("seealso", "seeAlso");
            properties.Add("serverreferencebl", "serverReferenceBL");
            properties.Add("serviceprincipalname", "servicePrincipalName");
            properties.Add("showinaddressbook", "showInAddressBook");
            properties.Add("showinadvancedviewonly", "showInAdvancedViewOnly");
            properties.Add("sidhistory", "sIDHistory");
            properties.Add("siteobjectbl", "siteObjectBL");
            properties.Add("sn", "sn");
            properties.Add("st", "st");
            properties.Add("street", "street");
            properties.Add("streetaddress", "streetAddress");
            properties.Add("subrefs", "subRefs");
            properties.Add("subschemasubentry", "subSchemaSubEntry");
            properties.Add("supplementalcredentials", "supplementalCredentials");
            properties.Add("systemflags", "systemFlags");
            properties.Add("telephonenumber", "telephoneNumber");
            properties.Add("teletexterminalidentifier", "teletexTerminalIdentifier");
            properties.Add("telexnumber", "telexNumber");
            properties.Add("terminalserver", "terminalServer");
            properties.Add("textencodedoraddress", "textEncodedORAddress");
            properties.Add("thumbnaillogo", "thumbnailLogo");
            properties.Add("thumbnailphoto", "thumbnailPhoto");
            properties.Add("title", "title");
            properties.Add("tokengroups", "tokenGroups");
            properties.Add("tokengroupsglobalanduniversal", "tokenGroupsGlobalAndUniversal");
            properties.Add("tokengroupsnogcacceptable", "tokenGroupsNoGCAcceptable");
            properties.Add("unicodepwd", "unicodePwd");
            properties.Add("url", "url");
            properties.Add("useraccountcontrol", "userAccountControl");
            properties.Add("usercert", "userCert");
            properties.Add("usercertificate", "userCertificate");
            properties.Add("userparameters", "userParameters");
            properties.Add("userpassword", "userPassword");
            properties.Add("userprincipalname", "userPrincipalName");
            properties.Add("usersharedfolder", "userSharedFolder");
            properties.Add("usersharedfolderother", "userSharedFolderOther");
            properties.Add("usersmimecertificate", "userSMIMECertificate");
            properties.Add("userworkstations", "userWorkstations");
            properties.Add("usnchanged", "uSNChanged");
            properties.Add("usncreated", "uSNCreated");
            properties.Add("usndsalastobjremoved", "uSNDSALastObjRemoved");
            properties.Add("usnintersite", "USNIntersite");
            properties.Add("usnlastobjrem", "uSNLastObjRem");
            properties.Add("usnsource", "uSNSource");
            properties.Add("wbempath", "wbemPath");
            properties.Add("wellknownobjects", "wellKnownObjects");
            properties.Add("whenchanged", "whenChanged");
            properties.Add("whencreated", "whenCreated");
            properties.Add("wwwhomepage", "wWWHomePage");
            properties.Add("x121address", "x121Address");
            properties.Add("appschemaversion", "appSchemaVersion");
            properties.Add("auditingpolicy", "auditingPolicy");
            properties.Add("autoreplymessage", "autoReplyMessage");
            properties.Add("birthlocation", "birthLocation");
            properties.Add("canupgradescript", "canUpgradeScript");
            properties.Add("comclassid", "cOMClassID");
            properties.Add("creationtime", "creationTime");
            properties.Add("currentlocation", "currentLocation");
            properties.Add("dc", "dc");
            properties.Add("dlmemdefault", "dLMemDefault");
            properties.Add("dn", "DN");
            properties.Add("dnshostname", "dNSHostName");
            properties.Add("dnsproperty", "dNSProperty");
            properties.Add("dnsrecord", "dnsRecord");
            properties.Add("dnstombstoned", "dNSTombstoned");
            properties.Add("domainreplica", "domainReplica");
            properties.Add("drivername", "driverName");
            properties.Add("driverversion", "driverVersion");
            properties.Add("employeetype", "employeeType");
            properties.Add("fileextpriority", "fileExtPriority");
            properties.Add("forcelogoff", "forceLogoff");
            properties.Add("fromserver", "fromServer");
            properties.Add("frsfilefilter", "fRSFileFilter");
            properties.Add("frsreplicasetguid", "fRSReplicaSetGUID");
            properties.Add("frsreplicasettype", "fRSReplicaSetType");
            properties.Add("frsversionguid", "fRSVersionGUID");
            properties.Add("gpcfilesyspath", "gPCFileSysPath");
            properties.Add("gpcfunctionalityversion", "gPCFunctionalityVersion");
            properties.Add("gpcmachineextensionnames", "gPCMachineExtensionNames");
            properties.Add("gpcuserextensionnames", "gPCUserExtensionNames");
            properties.Add("gplink", "gPLink");
            properties.Add("gpoptions", "gPOptions");
            properties.Add("grouptype", "groupType");
            properties.Add("hidedlmembership", "hideDLMembership");
            properties.Add("installuilevel", "installUiLevel");
            properties.Add("ipsecdata", "ipsecData");
            properties.Add("ipsecdatatype", "ipsecDataType");
            properties.Add("ipsecfilterreference", "ipsecFilterReference");
            properties.Add("ipsecid", "ipsecID");
            properties.Add("ipsecisakmpreference", "ipsecISAKMPReference");
            properties.Add("ipsecname", "ipsecName");
            properties.Add("ipsecnegotiationpolicyaction", "iPSECNegotiationPolicyAction");
            properties.Add("ipsecnegotiationpolicyreference", "ipsecNegotiationPolicyReference");
            properties.Add("ipsecnegotiationpolicytype", "iPSECNegotiationPolicyType");
            properties.Add("ipsecnfareference", "ipsecNFAReference");
            properties.Add("ipsecownersreference", "ipsecOwnersReference");
            properties.Add("keywords", "keywords");
            properties.Add("lastlogontimestamp", "lastLogonTimestamp");
            properties.Add("lastsettime", "lastSetTime");
            properties.Add("lastupdatesequence", "lastUpdateSequence");
            properties.Add("linktracksecret", "linkTrackSecret");
            properties.Add("localpolicyflags", "localPolicyFlags");
            properties.Add("location", "location");
            properties.Add("lockoutduration", "lockoutDuration");
            properties.Add("lockoutobservationwindow", "lockOutObservationWindow");
            properties.Add("lockoutthreshold", "lockoutThreshold");
            properties.Add("machinearchitecture", "machineArchitecture");
            properties.Add("mailnickname", "mailNickname");
            properties.Add("managedby", "managedBy");
            properties.Add("mapirecipient", "mAPIRecipient");
            properties.Add("maxpwdage", "maxPwdAge");
            properties.Add("mdbusedefaults", "mDBUseDefaults");
            properties.Add("member", "member");
            properties.Add("minpwdage", "minPwdAge");
            properties.Add("minpwdlength", "minPwdLength");
            properties.Add("modifiedcount", "modifiedCount");
            properties.Add("modifiedcountatlastprom", "modifiedCountAtLastProm");
            properties.Add("msdfs-generationguidv2", "msDFS-GenerationGUIDv2");
            properties.Add("msdfs-lastmodifiedv2", "msDFS-LastModifiedv2");
            properties.Add("msdfs-linkidentityguidv2", "msDFS-LinkIdentityGUIDv2");
            properties.Add("msdfs-linkpathv2", "msDFS-LinkPathv2");
            properties.Add("msdfs-namespaceidentityguidv2", "msDFS-NamespaceIdentityGUIDv2");
            properties.Add("msdfs-propertiesv2", "msDFS-Propertiesv2");
            properties.Add("msdfsr-cachepolicy", "msDFSR-CachePolicy");
            properties.Add("msdfsr-computerreference", "msDFSR-ComputerReference");
            properties.Add("msdfsr-computerreferencebl", "msDFSR-ComputerReferenceBL");
            properties.Add("msdfsr-conflictpath", "msDFSR-ConflictPath");
            properties.Add("msdfsr-conflictsizeinmb", "msDFSR-ConflictSizeInMb");
            properties.Add("msdfsr-contentsetguid", "msDFSR-ContentSetGuid");
            properties.Add("msdfsr-dfslinktarget", "msDFSR-DfsLinkTarget");
            properties.Add("msdfsr-dfspath", "msDFSR-DfsPath");
            properties.Add("msdfsr-directoryfilter", "msDFSR-DirectoryFilter");
            properties.Add("msdfsr-enabled", "msDFSR-Enabled");
            properties.Add("msdfsr-filefilter", "msDFSR-FileFilter");
            properties.Add("msdfsr-flags", "msDFSR-Flags");
            properties.Add("msdfsr-maxageincacheinmin", "msDFSR-MaxAgeInCacheInMin");
            properties.Add("msdfsr-memberreference", "msDFSR-MemberReference");
            properties.Add("msdfsr-memberreferencebl", "msDFSR-MemberReferenceBL");
            properties.Add("msdfsr-mindurationcacheinmin", "msDFSR-MinDurationCacheInMin");
            properties.Add("msdfsr-options", "msDFSR-Options");
            properties.Add("msdfsr-rdcenabled", "msDFSR-RdcEnabled");
            properties.Add("msdfsr-rdcminfilesizeinkb", "msDFSR-RdcMinFileSizeInKb");
            properties.Add("msdfsr-readonly", "msDFSR-ReadOnly");
            properties.Add("msdfsr-replicationgroupguid", "msDFSR-ReplicationGroupGuid");
            properties.Add("msdfsr-replicationgrouptype", "msDFSR-ReplicationGroupType");
            properties.Add("msdfsr-rootpath", "msDFSR-RootPath");
            properties.Add("msdfsr-rootsizeinmb", "msDFSR-RootSizeInMb");
            properties.Add("msdfsr-schedule", "msDFSR-Schedule");
            properties.Add("msdfsr-stagingpath", "msDFSR-StagingPath");
            properties.Add("msdfsr-stagingsizeinmb", "msDFSR-StagingSizeInMb");
            properties.Add("msdfsr-tombstoneexpiryinmin", "msDFSR-TombstoneExpiryInMin");
            properties.Add("msdfsr-version", "msDFSR-Version");
            properties.Add("msdfs-schemamajorversion", "msDFS-SchemaMajorVersion");
            properties.Add("msdfs-schemaminorversion", "msDFS-SchemaMinorVersion");
            properties.Add("msdfs-targetlistv2", "msDFS-TargetListv2");
            properties.Add("msdfs-ttlv2", "msDFS-Ttlv2");
            properties.Add("msds-allowedtodelegateto", "msDS-AllowedToDelegateTo");
            properties.Add("msds-alluserstrustquota", "msDS-AllUsersTrustQuota");
            properties.Add("msds-behavior-version", "msDS-Behavior-Version");
            properties.Add("msds-generationid", "msDS-GenerationId");
            properties.Add("msds-isdomainfor", "msDS-IsDomainFor");
            properties.Add("msds-lastknownrdn", "msDS-LastKnownRDN");
            properties.Add("ms-ds-machineaccountquota", "ms-DS-MachineAccountQuota");
            properties.Add("msds-masteredby", "msDs-masteredBy");
            properties.Add("msds-nctype", "msDS-NcType");
            properties.Add("msds-perusertrustquota", "msDS-PerUserTrustQuota");
            properties.Add("msds-perusertrusttombstonesquota", "msDS-PerUserTrustTombstonesQuota");
            properties.Add("msds-supportedencryptiontypes", "msDS-SupportedEncryptionTypes");
            properties.Add("msexchadcglobalnames", "msExchADCGlobalNames");
            properties.Add("msexchalobjectversion", "msExchALObjectVersion");
            properties.Add("msexchhidefromaddresslists", "msExchHideFromAddressLists");
            properties.Add("msexchhomeservername", "msExchHomeServerName");
            properties.Add("msexchmessagehygienescljunkthreshold", "msExchMessageHygieneSCLJunkThreshold");
            properties.Add("msexchmobilemailboxflags", "msExchMobileMailboxFlags");
            properties.Add("msexchpoliciesexcluded", "msExchPoliciesExcluded");
            properties.Add("msexchrecipientdisplaytype", "msExchRecipientDisplayType");
            properties.Add("msexchrequireauthtosendto", "msExchRequireAuthToSendTo");
            properties.Add("msexchuseraccountcontrol", "msExchUserAccountControl");
            properties.Add("msifilelist", "msiFileList");
            properties.Add("msiscriptname", "msiScriptName");
            properties.Add("msiscriptpath", "msiScriptPath");
            properties.Add("ms-net-ieee-80211-gp-policydata", "ms-net-ieee-80211-GP-PolicyData");
            properties.Add("ms-net-ieee-80211-gp-policyguid", "ms-net-ieee-80211-GP-PolicyGUID");
            properties.Add("msrrasattribute", "msRRASAttribute");
            properties.Add("msrtcsip-archivedefault", "msRTCSIP-ArchiveDefault");
            properties.Add("msrtcsip-archivedefaultflags", "msRTCSIP-ArchiveDefaultFlags");
            properties.Add("msrtcsip-archivefederationdefault", "msRTCSIP-ArchiveFederationDefault");
            properties.Add("msrtcsip-archivefederationdefaultflags", "msRTCSIP-ArchiveFederationDefaultFlags");
            properties.Add("msrtcsip-archivingenabled", "msRTCSIP-ArchivingEnabled");
            properties.Add("msrtcsip-default", "msRTCSIP-Default");
            properties.Add("msrtcsip-defaultpolicy", "msRTCSIP-DefaultPolicy");
            properties.Add("msrtcsip-defpresencesubscriptiontimeout", "msRTCSIP-DefPresenceSubscriptionTimeout");
            properties.Add("msrtcsip-defregistrationtimeout", "msRTCSIP-DefRegistrationTimeout");
            properties.Add("msrtcsip-defroamingdatasubscriptiontimeout", "msRTCSIP-DefRoamingDataSubscriptionTimeout");
            properties.Add("msrtcsip-description", "msRTCSIP-Description");
            properties.Add("msrtcsip-domainname", "msRTCSIP-DomainName");
            properties.Add("msrtcsip-enablebesteffortnotify", "msRTCSIP-EnableBestEffortNotify");
            properties.Add("msrtcsip-enablefederation", "msRTCSIP-EnableFederation");
            properties.Add("msrtcsip-globalsettingsdata", "msRTCSIP-GlobalSettingsData");
            properties.Add("msrtcsip-maxnumoutstandingsearchperserver", "msRTCSIP-MaxNumOutstandingSearchPerServer");
            properties.Add("msrtcsip-maxnumsubscriptionsperuser", "msRTCSIP-MaxNumSubscriptionsPerUser");
            properties.Add("msrtcsip-maxpresencesubscriptiontimeout", "msRTCSIP-MaxPresenceSubscriptionTimeout");
            properties.Add("msrtcsip-maxregistrationtimeout", "msRTCSIP-MaxRegistrationTimeout");
            properties.Add("msrtcsip-maxroamingdatasubscriptiontimeout", "msRTCSIP-MaxRoamingDataSubscriptionTimeout");
            properties.Add("msrtcsip-mcutype", "msRTCSIP-MCUType");
            properties.Add("msrtcsip-mcuvendor", "msRTCSIP-MCUVendor");
            properties.Add("msrtcsip-meetingflags", "msRTCSIP-MeetingFlags");
            properties.Add("msrtcsip-meetingpolicy", "msRTCSIP-MeetingPolicy");
            properties.Add("msrtcsip-minpresencesubscriptiontimeout", "msRTCSIP-MinPresenceSubscriptionTimeout");
            properties.Add("msrtcsip-minregistrationtimeout", "msRTCSIP-MinRegistrationTimeout");
            properties.Add("msrtcsip-minroamingdatasubscriptiontimeout", "msRTCSIP-MinRoamingDataSubscriptionTimeout");
            properties.Add("msrtcsip-numdevicesperuser", "msRTCSIP-NumDevicesPerUser");
            properties.Add("msrtcsip-optionflags", "msRTCSIP-OptionFlags");
            properties.Add("msrtcsip-policycontent", "msRTCSIP-PolicyContent");
            properties.Add("msrtcsip-policytype", "msRTCSIP-PolicyType");
            properties.Add("msrtcsip-primaryuseraddress", "msRTCSIP-PrimaryUserAddress");
            properties.Add("msrtcsip-routeusageattribute", "msRTCSIP-RouteUsageAttribute");
            properties.Add("msrtcsip-searchmaxrequests", "msRTCSIP-SearchMaxRequests");
            properties.Add("msrtcsip-searchmaxresults", "msRTCSIP-SearchMaxResults");
            properties.Add("msrtcsip-trustedmcufqdn", "msRTCSIP-TrustedMCUFQDN");
            properties.Add("msrtcsip-trustedserverfqdn", "msRTCSIP-TrustedServerFQDN");
            properties.Add("msrtcsip-trustedserverversion", "msRTCSIP-TrustedServerVersion");
            properties.Add("msrtcsip-trustedwebcomponentsserverfqdn", "msRTCSIP-TrustedWebComponentsServerFQDN");
            properties.Add("msrtcsip-ucflags", "msRTCSIP-UCFlags");
            properties.Add("msrtcsip-ucpolicy", "msRTCSIP-UCPolicy");
            properties.Add("msrtcsip-userenabled", "msRTCSIP-UserEnabled");
            properties.Add("mswmi-author", "msWMI-Author");
            properties.Add("mswmi-changedate", "msWMI-ChangeDate");
            properties.Add("mswmi-creationdate", "msWMI-CreationDate");
            properties.Add("mswmi-id", "msWMI-ID");
            properties.Add("mswmi-name", "msWMI-Name");
            properties.Add("mswmi-parm1", "msWMI-Parm1");
            properties.Add("mswmi-parm2", "msWMI-Parm2");
            properties.Add("netbootallownewclients", "netbootAllowNewClients");
            properties.Add("netbootansweronlyvalidclients", "netbootAnswerOnlyValidClients");
            properties.Add("netbootanswerrequests", "netbootAnswerRequests");
            properties.Add("netbootcurrentclientcount", "netbootCurrentClientCount");
            properties.Add("netbootguid", "netbootGUID");
            properties.Add("netbootinitialization", "netbootInitialization");
            properties.Add("netbootlimitclients", "netbootLimitClients");
            properties.Add("netbootmaxclients", "netbootMaxClients");
            properties.Add("netbootmirrordatafile", "netbootMirrorDataFile");
            properties.Add("netbootnewmachinenamingpolicy", "netbootNewMachineNamingPolicy");
            properties.Add("netbootnewmachineou", "netbootNewMachineOU");
            properties.Add("netbootserver", "netbootServer");
            properties.Add("nextrid", "nextRid");
            properties.Add("ntmixeddomain", "nTMixedDomain");
            properties.Add("oofreplytooriginator", "oOFReplyToOriginator");
            properties.Add("operatingsystem", "operatingSystem");
            properties.Add("operatingsystemservicepack", "operatingSystemServicePack");
            properties.Add("operatingsystemversion", "operatingSystemVersion");
            properties.Add("packageflags", "packageFlags");
            properties.Add("packagename", "packageName");
            properties.Add("packagetype", "packageType");
            properties.Add("portname", "portName");
            properties.Add("printattributes", "printAttributes");
            properties.Add("printbinnames", "printBinNames");
            properties.Add("printcollate", "printCollate");
            properties.Add("printcolor", "printColor");
            properties.Add("printduplexsupported", "printDuplexSupported");
            properties.Add("printendtime", "printEndTime");
            properties.Add("printername", "printerName");
            properties.Add("printkeepprintedjobs", "printKeepPrintedJobs");
            properties.Add("printlanguage", "printLanguage");
            properties.Add("printmaxresolutionsupported", "printMaxResolutionSupported");
            properties.Add("printmaxxextent", "printMaxXExtent");
            properties.Add("printmaxyextent", "printMaxYExtent");
            properties.Add("printmediaready", "printMediaReady");
            properties.Add("printmediasupported", "printMediaSupported");
            properties.Add("printmemory", "printMemory");
            properties.Add("printminxextent", "printMinXExtent");
            properties.Add("printminyextent", "printMinYExtent");
            properties.Add("printnumberup", "printNumberUp");
            properties.Add("printorientationssupported", "printOrientationsSupported");
            properties.Add("printpagesperminute", "printPagesPerMinute");
            properties.Add("printrate", "printRate");
            properties.Add("printrateunit", "printRateUnit");
            properties.Add("printsharename", "printShareName");
            properties.Add("printspooling", "printSpooling");
            properties.Add("printstaplingsupported", "printStaplingSupported");
            properties.Add("printstarttime", "printStartTime");
            properties.Add("priority", "priority");
            properties.Add("priorsettime", "priorSetTime");
            properties.Add("productcode", "productCode");
            properties.Add("pwdhistorylength", "pwdHistoryLength");
            properties.Add("pwdproperties", "pwdProperties");
            properties.Add("replicatedobjectversion", "replicatedObjectVersion");
            properties.Add("replicationsignature", "replicationSignature");
            properties.Add("reporttooriginator", "reportToOriginator");
            properties.Add("reporttoowner", "reportToOwner");
            properties.Add("ridallocationpool", "rIDAllocationPool");
            properties.Add("ridavailablepool", "rIDAvailablePool");
            properties.Add("ridmanagerreference", "rIDManagerReference");
            properties.Add("ridnextrid", "rIDNextRID");
            properties.Add("ridpreviousallocationpool", "rIDPreviousAllocationPool");
            properties.Add("ridsetreferences", "rIDSetReferences");
            properties.Add("ridusedpool", "rIDUsedPool");
            properties.Add("samdomainupdates", "samDomainUpdates");
            properties.Add("seqnotification", "seqNotification");
            properties.Add("serialnumber", "serialNumber");
            properties.Add("servername", "serverName");
            properties.Add("serverreference", "serverReference");
            properties.Add("serverstate", "serverState");
            properties.Add("servicebindinginformation", "serviceBindingInformation");
            properties.Add("serviceclassname", "serviceClassName");
            properties.Add("servicednsname", "serviceDNSName");
            properties.Add("servicednsnametype", "serviceDNSNameType");
            properties.Add("shortservername", "shortServerName");
            properties.Add("timerefresh", "timeRefresh");
            properties.Add("timevolchange", "timeVolChange");
            properties.Add("uascompat", "uASCompat");
            properties.Add("uncname", "uNCName");
            properties.Add("unixuserpassword", "unixUserPassword");
            properties.Add("upgradeproductcode", "upgradeProductCode");
            properties.Add("versionnumber", "versionNumber");
            properties.Add("versionnumberhi", "versionNumberHi");
            properties.Add("versionnumberlo", "versionNumberLo");
            properties.Add("voltableidxguid", "volTableIdxGUID");
        }

        public static PropertyLookup Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new PropertyLookup();
                }
                return instance;
            }
        }

        public string get(string property)
        {
            if (properties.ContainsKey(property))
            {
                return properties[property.ToLower()];
            }
            return string.Empty;
        }
    }
}